import { GoogleGenAI, GenerateContentResponse, Modality } from "@google/genai";

/**
 * Generates an image from a text prompt, optionally using a reference image, supporting multiple AI models.
 * @param prompt The detailed text prompt for image generation.
 * @param apiKey The API key to use for this request.
 * @param model The AI model to use ('gemini-2.5-flash-image-preview' or 'imagen-4.0-generate-001').
 * @param imageBase64 The base64 encoded reference image string (optional, only for Gemini).
 * @param mimeType The MIME type of the reference image (optional, only for Gemini).
 * @returns A promise that resolves to a base64 encoded image URL.
 */
export async function generateImage(prompt: string, apiKey: string, model: string, imageBase64?: string, mimeType?: string): Promise<string> {
    try {
        if (!apiKey) throw new Error("API Key is missing.");
        const ai = new GoogleGenAI({ apiKey });

        if (model === 'imagen-4.0-generate-001') {
            if (imageBase64) {
                throw new Error("Model 'imagen-4.0-generate-001' does not support reference images.");
            }
            const response = await ai.models.generateImages({
                model: 'imagen-4.0-generate-001',
                prompt: prompt,
                config: {
                    numberOfImages: 1,
                    outputMimeType: 'image/jpeg',
                    aspectRatio: '3:4',
                },
            });
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;

        } else if (model === 'gemini-2.5-flash-image-preview') {
            const parts: ({ text: string } | { inlineData: { data: string; mimeType: string; } })[] = [];

            if (imageBase64 && mimeType) {
                parts.push({ inlineData: { data: imageBase64, mimeType } });
            }
            parts.push({ text: prompt });

            const response: GenerateContentResponse = await ai.models.generateContent({
                model: 'gemini-2.5-flash-image-preview',
                contents: { parts },
                config: {
                    responseModalities: [Modality.IMAGE, Modality.TEXT],
                },
            });

            for (const part of response.candidates[0].content.parts) {
                if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                    const base64ImageBytes: string = part.inlineData.data;
                    const imageMimeType = part.inlineData.mimeType;
                    return `data:${imageMimeType};base64,${base64ImageBytes}`;
                }
            }

            const errorText = response.text?.trim();
            if (errorText) {
                const safetyError = (response as any).error?.message;
                if (safetyError) {
                    throw new Error(`Image generation blocked: ${safetyError} - ${errorText}`);
                }
                throw new Error(`API returned a text response instead of an image: ${errorText}`);
            }
            
            throw new Error('No image was generated by the API.');
        } else {
            throw new Error(`Unsupported model selected: ${model}`);
        }

    } catch (error) {
        console.error("Error generating image with AI API:", error);
        throw new Error(`Failed to generate image: ${error instanceof Error ? error.message : String(error)}`);
    }
}


/**
 * Generates a text response from a text prompt.
 * @param prompt The text prompt for text generation.
 * @param apiKey The API key to use for this request.
 * @returns A promise that resolves to the generated text string.
 */
export async function generateText(prompt: string, apiKey: string): Promise<string> {
    try {
        if (!apiKey) throw new Error("API Key is missing.");
        const ai = new GoogleGenAI({ apiKey });

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
        });

        const text = response.text;
        if (!text) {
             const safetyError = (response as any).error?.message;
            if (safetyError) {
                throw new Error(`Text generation blocked: ${safetyError}`);
            }
            throw new Error("API returned an empty text response.");
        }
        return text.trim();

    } catch (error) {
        console.error("Error generating text with AI API:", error);
        throw new Error(`Failed to generate text: ${error instanceof Error ? error.message : String(error)}`);
    }
}
